<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<title>KeilWrapper Features</title>
<style type="text/css"><![CDATA[
.notImplemented {
    background-color: #faa;
}
.unitTested, .partiallyImplemented {
    background-color: #ffa;
}
]]></style>
</head>
<body>

<h1>KeilWrapper Features</h1>

<table border="1">
    <tr>
        <th>Feature</th>
        <th>State</th>
    </tr>
    <tr>
        <td>Detecting the tool from the name</td>
        <td class="unitTested">unit-tested</td>
    </tr>
    <tr>
        <td>Detecting the toolchain from the name</td>
        <td class="unitTested">unit-tested</td>
    </tr>
    <tr>
        <td>Selecting the toolchain with <code>-march</code> 8051 -> Cx51, 80251 -> C251, C166 -> C166</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>
            Preprocessing with GCC instead of Keil in order to allow C99 preprocessor features.<br />
            The pre-defined macros would still be the ones specified in i.e. <a href="http://www.keil.com/support/man/docs/c251/c251_pp_predefmacroconst.htm">C251 Predefined Macros</a>.<br />
            Challenge:<br />The memory model must be known to the preprocessor because the preprocessor provides <code>__MODEL__</code> which can be 0 (SMALL), 2 (LARGE), 3 (TINY), 4 (XTINY) or 5 (XSMALL).<br />
            The memory model can be changed in the file using a <code>#pragma</code>, i.e. <code>#pragma SMALL</code>.
        </td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Converting <code>-I X </code> to <code>INCDIR(X)</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Converting <code>-D X </code> to <code>DEFINE(X)</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Reordering of command line arguments to the expected order</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Converting multiple <code>-I</code> to a single <code>INCDIR()</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Converting output filename from <code>XYZ.OBJ</code> to <code>xyz.o</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Support option <code>-o</code> to specify output filename <code>OBJECT()</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Support option <code>-c</code> to compile and assemble but not link</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Support option <code>-S</code> to compile but not assemble or link</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Support option <code>-E</code> to run the preprocessor only <code>PREPRINTONLY</code>, understanding that <code>-E -o FILENAME</code> becomes <code>PREPRINTONLY(FILENAME)</code> instead of <code>PREPRINTONLY OBJECT(FILENAME)</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Support option <code>-h</code> to print a help text.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Support option <code>-V</code> to print version information.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Support option <code>-v</code> to be verbose.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Change message format to what tools understand.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Change the return value 1 into 0 and 2 into 1.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>
            Support -Werror for turning warnings into errors.
            This would disable turning return value 1 into 0 and change the message text of warnings from warning into error.
        </td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Supply defaults for output parameters so that the files get placed in the current working directory, not in the source directory.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Get the path to the Keil binaries using PATH.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Locate the binaries via environment variables <code>KEIL_C166_HOME</code>, <code>KEIL_C51_HOME</code> and <code>KEIL_C251_HOME</code>.</td>
        <td class="partiallyImplemented">Partially Implemented</td>
    </tr>
    <tr>
        <td>Get the path to the Keil binaries using Windows registry.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Allow compilation of multiple files (call C251 multiple times).</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Allow compilation of assembly files (i.e. detects suffix .s and calls assembler instead of compiler automatically).</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Allow linkage of files (i.e. detects suffix .o and .a and calls linker instead of compiler automatically).</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Understand <code>-Xlinker</code> for passing options to the linker.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Understand <code>-Xpreprocessor</code> for passing options to the preprocessor.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Understand <code>-Xassembler</code> for passing options to the assembler.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Understand <code>-wrapper</code> for wrapping the subcommands.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Understand <code>@file</code> like gcc.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>As <code>ar</code>, understand the options of <code>ar</code> and properly call <code>LIB251</code> / <code>LIB51</code> / <code>LIB166</code> instead.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Insert <code>#define __FLOAT64__ 1</code> at <code>#pragma FLOAT64</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Insert <code>#define __MODEL__ 0</code> at <code>#pragma SMALL</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Insert <code>#define __MODEL__ 2</code> at <code>#pragma LARGE</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Insert <code>#define __MODEL__ 3</code> at <code>#pragma TINY</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Insert <code>#define __MODEL__ 4</code> at <code>#pragma XTINY</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Insert <code>#define __MODEL__ 5</code> at <code>#pragma XSMALL</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Insert <code>#define __MODSRC__ 0</code> at <code>#pragma MODBIN</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Insert <code>#define __MODSRC__ 1</code> at <code>#pragma MODSRC</code></td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>If gcc is used for preprocessing, and -fpreprocessed was given, skip preprocessing.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>If gcc is used for preprocessing, and file suffix is .i, skip preprocessing as if -fpreprocessed was used.</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Understand -m8051 as alias for -march=8051 to choose Cx51</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Understand -m80251 as alias for -march=80251 to choose C251</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>Understand -mC166 as alias for -march=C166 to choose C166</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
    <tr>
        <td>If gcc is used for preprocessing, tell it to skip the standard system directories for header files by passing -nostdinc</td>
        <td class="notImplemented">Not Implemented</td>
    </tr>
</table>

<p>
    TODO:2014-04-28:cher:3:Check whether <code>#pragma MODSRC</code> exists.
    It is mentined in <a href="http://www.keil.com/support/man/docs/c251/c251_modbin.htm">MODBIN Compiler Directive</a> but that might be a bug in the documentation.
</p>

</body>
</html>
